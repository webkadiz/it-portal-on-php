(window["webpackJsonp"] = window["webpackJsonp"] || []).push([["vendors~index~write"],{

/***/ "../node_modules/css-loader/index.js!../node_modules/sass-loader/lib/loader.js!../node_modules/jquery-selectric/src/selectric.scss":
/*!********************************************************************************************************************************!*\
  !*** ../node_modules/css-loader!../node_modules/sass-loader/lib/loader.js!../node_modules/jquery-selectric/src/selectric.scss ***!
  \********************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("exports = module.exports = __webpack_require__(/*! ../../css-loader/lib/css-base.js */ \"../node_modules/css-loader/lib/css-base.js\")(false);\n// imports\n\n\n// module\nexports.push([module.i, \".selectric-wrapper {\\n  position: relative;\\n  cursor: pointer; }\\n\\n.selectric-responsive {\\n  width: 100%; }\\n\\n.selectric {\\n  border: 1px solid #DDD;\\n  background: #F8F8F8;\\n  position: relative; }\\n  .selectric .label {\\n    display: block;\\n    white-space: nowrap;\\n    overflow: hidden;\\n    text-overflow: ellipsis;\\n    margin: 0 38px 0 10px;\\n    font-size: 12px;\\n    line-height: 38px;\\n    color: #444;\\n    height: 38px;\\n    user-select: none; }\\n  .selectric .button {\\n    display: block;\\n    position: absolute;\\n    right: 0;\\n    top: 0;\\n    width: 38px;\\n    height: 38px;\\n    color: #BBB;\\n    text-align: center;\\n    font: 0/0 a;\\n    *font: 20px/38px Lucida Sans Unicode, Arial Unicode MS, Arial; }\\n    .selectric .button:after {\\n      content: \\\" \\\";\\n      position: absolute;\\n      top: 0;\\n      right: 0;\\n      bottom: 0;\\n      left: 0;\\n      margin: auto;\\n      width: 0;\\n      height: 0;\\n      border: 4px solid transparent;\\n      border-top-color: #BBB;\\n      border-bottom: none; }\\n\\n.selectric-focus .selectric {\\n  border-color: #aaaaaa; }\\n\\n.selectric-hover .selectric {\\n  border-color: #c4c4c4; }\\n  .selectric-hover .selectric .button {\\n    color: #a2a2a2; }\\n    .selectric-hover .selectric .button:after {\\n      border-top-color: #a2a2a2; }\\n\\n.selectric-open {\\n  z-index: 9999; }\\n  .selectric-open .selectric {\\n    border-color: #c4c4c4; }\\n  .selectric-open .selectric-items {\\n    display: block; }\\n\\n.selectric-disabled {\\n  filter: alpha(opacity=50);\\n  opacity: 0.5;\\n  cursor: default;\\n  user-select: none; }\\n\\n.selectric-hide-select {\\n  position: relative;\\n  overflow: hidden;\\n  width: 0;\\n  height: 0; }\\n  .selectric-hide-select select {\\n    position: absolute;\\n    left: -100%;\\n    display: none; }\\n\\n.selectric-input {\\n  position: absolute !important;\\n  top: 0 !important;\\n  left: 0 !important;\\n  overflow: hidden !important;\\n  clip: rect(0, 0, 0, 0) !important;\\n  margin: 0 !important;\\n  padding: 0 !important;\\n  width: 1px !important;\\n  height: 1px !important;\\n  outline: none !important;\\n  border: none !important;\\n  *font: 0/0 a !important;\\n  background: none !important; }\\n\\n.selectric-temp-show {\\n  position: absolute !important;\\n  visibility: hidden !important;\\n  display: block !important; }\\n\\n/* Items box */\\n.selectric-items {\\n  display: none;\\n  position: absolute;\\n  top: 100%;\\n  left: 0;\\n  background: #F8F8F8;\\n  border: 1px solid #c4c4c4;\\n  z-index: -1;\\n  box-shadow: 0 0 10px -6px; }\\n  .selectric-items .selectric-scroll {\\n    height: 100%;\\n    overflow: auto; }\\n  .selectric-above .selectric-items {\\n    top: auto;\\n    bottom: 100%; }\\n  .selectric-items ul, .selectric-items li {\\n    list-style: none;\\n    padding: 0;\\n    margin: 0;\\n    font-size: 12px;\\n    line-height: 20px;\\n    min-height: 20px; }\\n  .selectric-items li {\\n    display: block;\\n    padding: 10px;\\n    color: #666;\\n    cursor: pointer; }\\n    .selectric-items li.selected {\\n      background: #E0E0E0;\\n      color: #444; }\\n    .selectric-items li:hover {\\n      background: #D5D5D5;\\n      color: #444; }\\n  .selectric-items .disabled {\\n    filter: alpha(opacity=50);\\n    opacity: 0.5;\\n    cursor: default !important;\\n    background: none !important;\\n    color: #666 !important;\\n    user-select: none; }\\n  .selectric-items .selectric-group .selectric-group-label {\\n    font-weight: bold;\\n    padding-left: 10px;\\n    cursor: default;\\n    user-select: none;\\n    background: none;\\n    color: #444; }\\n  .selectric-items .selectric-group.disabled li {\\n    filter: alpha(opacity=100);\\n    opacity: 1; }\\n  .selectric-items .selectric-group li {\\n    padding-left: 25px; }\\n\", \"\"]);\n\n// exports\n\n\n//# sourceURL=webpack:///../node_modules/jquery-selectric/src/selectric.scss?../node_modules/css-loader!../node_modules/sass-loader/lib/loader.js");

/***/ }),

/***/ "../node_modules/jquery-selectric/src/jquery.selectric.js":
/*!****************************************************************!*\
  !*** ../node_modules/jquery-selectric/src/jquery.selectric.js ***!
  \****************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;(function(factory) {\n  if (typeof module === 'object' && typeof module.exports === 'object') {\n    factory(__webpack_require__(/*! jquery */ \"../node_modules/jquery/dist/jquery.js\"));\n  } else if (true) {\n      // AMD. Register as an anonymous module.\n        !(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory(window.jQuery)),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?\n\t\t\t\t(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n    } else {}\n}(function($) {\n  'use strict';\n\n  var $doc = $(document);\n  var $win = $(window);\n\n  var pluginName = 'selectric';\n  var classList = 'Input Items Open Disabled TempShow HideSelect Wrapper Focus Hover Responsive Above Scroll Group GroupLabel';\n  var bindSufix = '.sl';\n\n  var chars = ['a', 'e', 'i', 'o', 'u', 'n', 'c', 'y'];\n  var diacritics = [\n    /[\\xE0-\\xE5]/g, // a\n    /[\\xE8-\\xEB]/g, // e\n    /[\\xEC-\\xEF]/g, // i\n    /[\\xF2-\\xF6]/g, // o\n    /[\\xF9-\\xFC]/g, // u\n    /[\\xF1]/g,      // n\n    /[\\xE7]/g,      // c\n    /[\\xFD-\\xFF]/g  // y\n  ];\n\n  /**\n   * Create an instance of Selectric\n   *\n   * @constructor\n   * @param {Node} element - The &lt;select&gt; element\n   * @param {object}  opts - Options\n   */\n  var Selectric = function(element, opts) {\n    var _this = this;\n\n    _this.element = element;\n    _this.$element = $(element);\n\n    _this.state = {\n      enabled     : false,\n      opened      : false,\n      currValue   : -1,\n      selectedIdx : -1\n    };\n\n    _this.eventTriggers = {\n      open    : _this.open,\n      close   : _this.close,\n      destroy : _this.destroy,\n      refresh : _this.refresh,\n      init    : _this.init\n    };\n\n    _this.init(opts);\n  };\n\n  Selectric.prototype = {\n    utils: {\n      /**\n       * Detect mobile browser\n       *\n       * @return {boolean}\n       */\n      isMobile: function() {\n        return /android|ip(hone|od|ad)/i.test(navigator.userAgent);\n      },\n\n      /**\n       * Escape especial characters in string (https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions)\n       *\n       * @param  {string} str - The string to be escaped\n       * @return {string}       The string with the special characters escaped\n       */\n      escapeRegExp: function(str) {\n        return str.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&'); // $& means the whole matched string\n      },\n\n      /**\n       * Replace diacritics\n       *\n       * @param  {string} str - The string to replace the diacritics\n       * @return {string}       The string with diacritics replaced with ascii characters\n       */\n      replaceDiacritics: function(str) {\n        var k = diacritics.length;\n\n        while (k--) {\n          str = str.toLowerCase().replace(diacritics[k], chars[k]);\n        }\n\n        return str;\n      },\n\n      /**\n       * Format string\n       * https://gist.github.com/atesgoral/984375\n       *\n       * @param  {string} f - String to be formated\n       * @return {string}     String formated\n       */\n      format: function (f) {\n        var a = arguments; // store outer arguments\n        return ('' + f) // force format specifier to String\n          .replace( // replace tokens in format specifier\n            /\\{(?:(\\d+)|(\\w+))\\}/g, // match {token} references\n            function (\n              s, // the matched string (ignored)\n              i, // an argument index\n              p // a property name\n            ) {\n              return p && a[1] // if property name and first argument exist\n                ? a[1][p] // return property from first argument\n                : a[i]; // assume argument index and return i-th argument\n            });\n      },\n\n      /**\n       * Get the next enabled item in the options list.\n       *\n       * @param  {object} selectItems - The options object.\n       * @param  {number}    selected - Index of the currently selected option.\n       * @return {object}               The next enabled item.\n       */\n      nextEnabledItem: function(selectItems, selected) {\n        while ( selectItems[ selected = (selected + 1) % selectItems.length ].disabled ) {\n          // empty\n        }\n        return selected;\n      },\n\n      /**\n       * Get the previous enabled item in the options list.\n       *\n       * @param  {object} selectItems - The options object.\n       * @param  {number}    selected - Index of the currently selected option.\n       * @return {object}               The previous enabled item.\n       */\n      previousEnabledItem: function(selectItems, selected) {\n        while ( selectItems[ selected = (selected > 0 ? selected : selectItems.length) - 1 ].disabled ) {\n          // empty\n        }\n        return selected;\n      },\n\n      /**\n       * Transform camelCase string to dash-case.\n       *\n       * @param  {string} str - The camelCased string.\n       * @return {string}       The string transformed to dash-case.\n       */\n      toDash: function(str) {\n        return str.replace(/([a-z])([A-Z])/g, '$1-$2').toLowerCase();\n      },\n\n      /**\n       * Calls the events and hooks registered with function name.\n       *\n       * @param {string}    fn - The name of the function.\n       * @param {number} scope - Scope that should be set on the function.\n       */\n      triggerCallback: function(fn, scope) {\n        var elm = scope.element;\n        var func = scope.options['on' + fn];\n\n        if ( $.isFunction(func) ) {\n          func.call(elm, elm, scope);\n        }\n\n        if ( $.fn[pluginName].hooks[fn] ) {\n          $.each($.fn[pluginName].hooks[fn], function() {\n            this.call(elm, elm, scope);\n          });\n        }\n\n        $(elm).trigger(pluginName + '-' + this.toDash(fn), scope);\n      }\n    },\n\n    /** Initializes */\n    init: function(opts) {\n      var _this = this;\n\n      // Set options\n      _this.options = $.extend(true, {}, $.fn[pluginName].defaults, _this.options, opts);\n\n      _this.utils.triggerCallback('BeforeInit', _this);\n\n      // Preserve data\n      _this.destroy(true);\n\n      // Disable on mobile browsers\n      if ( _this.options.disableOnMobile && _this.utils.isMobile() ) {\n        _this.disableOnMobile = true;\n        return;\n      }\n\n      // Get classes\n      _this.classes = _this.getClassNames();\n\n      // Create elements\n      var input        = $('<input/>', { 'class': _this.classes.input, 'readonly': _this.utils.isMobile() });\n      var items        = $('<div/>',   { 'class': _this.classes.items, 'tabindex': -1 });\n      var itemsScroll  = $('<div/>',   { 'class': _this.classes.scroll });\n      var wrapper      = $('<div/>',   { 'class': _this.classes.prefix, 'html': _this.options.arrowButtonMarkup });\n      var label        = $('<span/>',  { 'class': 'label' });\n      var outerWrapper = _this.$element.wrap('<div/>').parent().append(wrapper.prepend(label), items, input);\n\n      _this.elements = {\n        input        : input,\n        items        : items,\n        itemsScroll  : itemsScroll,\n        wrapper      : wrapper,\n        label        : label,\n        outerWrapper : outerWrapper\n      };\n\n      _this.$element\n        .on(_this.eventTriggers)\n        .wrap('<div class=\"' + _this.classes.hideselect + '\"/>');\n\n      _this.originalTabindex = _this.$element.prop('tabindex');\n      _this.$element.prop('tabindex', false);\n\n      _this.populate();\n      _this.activate();\n\n      _this.utils.triggerCallback('Init', _this);\n    },\n\n    /** Activates the plugin */\n    activate: function() {\n      var _this = this;\n      var originalWidth = _this.$element.width();\n\n      _this.utils.triggerCallback('BeforeActivate', _this);\n\n      _this.elements.outerWrapper.prop('class', [\n        _this.classes.wrapper,\n        _this.$element.prop('class').replace(/\\S+/g, _this.classes.prefix + '-$&'),\n        _this.options.responsive ? _this.classes.responsive : ''\n      ].join(' '));\n\n      if ( _this.options.inheritOriginalWidth && originalWidth > 0 ) {\n        _this.elements.outerWrapper.width(originalWidth);\n      }\n\n      if ( !_this.$element.prop('disabled') ) {\n        _this.state.enabled = true;\n\n        // Not disabled, so... Removing disabled class\n        _this.elements.outerWrapper.removeClass(_this.classes.disabled);\n\n        // Remove styles from items box\n        // Fix incorrect height when refreshed is triggered with fewer options\n        _this.$li = _this.elements.items.removeAttr('style').find('li');\n\n        _this.bindEvents();\n      } else {\n        _this.elements.outerWrapper.addClass(_this.classes.disabled);\n        _this.elements.input.prop('disabled', true);\n      }\n\n      _this.utils.triggerCallback('Activate', _this);\n    },\n\n    /**\n     * Generate classNames for elements\n     *\n     * @return {object} Classes object\n     */\n    getClassNames: function() {\n      var _this = this;\n      var customClass = _this.options.customClass;\n      var classesObj  = {};\n\n      $.each(classList.split(' '), function(i, currClass) {\n        var c = customClass.prefix + currClass;\n        classesObj[currClass.toLowerCase()] = customClass.camelCase ? c : _this.utils.toDash(c);\n      });\n\n      classesObj.prefix = customClass.prefix;\n\n      return classesObj;\n    },\n\n    /** Set the label text */\n    setLabel: function() {\n      var _this = this;\n      var labelBuilder = _this.options.labelBuilder;\n      var currItem = _this.lookupItems[_this.state.currValue];\n\n      _this.elements.label.html(\n        $.isFunction(labelBuilder)\n          ? labelBuilder(currItem)\n          : _this.utils.format(labelBuilder, currItem)\n      );\n    },\n\n    /** Get and save the available options */\n    populate: function() {\n      var _this = this;\n      var $options = _this.$element.children();\n      var $justOptions = _this.$element.find('option');\n      var selectedIndex = $justOptions.index($justOptions.filter(':selected'));\n      var currIndex = 0;\n\n      _this.state.currValue = (_this.state.selected = ~selectedIndex ? selectedIndex : 0);\n      _this.state.selectedIdx = _this.state.currValue;\n      _this.items = [];\n      _this.lookupItems = [];\n\n      if ( $options.length ) {\n        // Build options markup\n        $options.each(function(i) {\n          var $elm = $(this);\n\n          if ( $elm.is('optgroup') ) {\n\n            var optionsGroup = {\n              element       : $elm,\n              label         : $elm.prop('label'),\n              groupDisabled : $elm.prop('disabled'),\n              items         : []\n            };\n\n            $elm.children().each(function(i) {\n              var $elm = $(this);\n              var optionText = $elm.html();\n\n              optionsGroup.items[i] = {\n                index    : currIndex,\n                element  : $elm,\n                value    : $elm.val(),\n                text     : optionText,\n                slug     : _this.utils.replaceDiacritics(optionText),\n                disabled : optionsGroup.groupDisabled\n              };\n\n              _this.lookupItems[currIndex] = optionsGroup.items[i];\n\n              currIndex++;\n            });\n\n            _this.items[i] = optionsGroup;\n\n          } else {\n\n            var optionText = $elm.html();\n\n            _this.items[i] = {\n              index    : currIndex,\n              element  : $elm,\n              value    : $elm.val(),\n              text     : optionText,\n              slug     : _this.utils.replaceDiacritics(optionText),\n              disabled : $elm.prop('disabled')\n            };\n\n            _this.lookupItems[currIndex] = _this.items[i];\n\n            currIndex++;\n\n          }\n        });\n\n        _this.setLabel();\n        _this.elements.items.append( _this.elements.itemsScroll.html( _this.getItemsMarkup(_this.items) ) );\n      }\n    },\n\n    /**\n     * Generate options markup\n     *\n     * @param  {object} items - Object containing all available options\n     * @return {string}         HTML for the options box\n     */\n    getItemsMarkup: function(items) {\n      var _this = this;\n      var markup = '<ul>';\n\n      $.each(items, function(i, elm) {\n        if ( elm.label !== undefined ) {\n\n          markup += _this.utils.format('<ul class=\"{1}\"><li class=\"{2}\">{3}</li>',\n            $.trim([_this.classes.group, elm.groupDisabled ? 'disabled' : '', elm.element.prop('class')].join(' ')),\n            _this.classes.grouplabel,\n            elm.element.prop('label')\n          );\n\n          $.each(elm.items, function(i, elm) {\n            markup += _this.getItemMarkup(elm.index, elm);\n          });\n\n          markup += '</ul>';\n\n        } else {\n\n          markup += _this.getItemMarkup(elm.index, elm);\n\n        }\n      });\n\n      return markup + '</ul>';\n    },\n\n    /**\n     * Generate every option markup\n     *\n     * @param  {number} i   - Index of current item\n     * @param  {object} elm - Current item\n     * @return {string}       HTML for the option\n     */\n    getItemMarkup: function(i, elm) {\n      var _this = this;\n      var itemBuilder = _this.options.optionsItemBuilder;\n\n      return _this.utils.format('<li data-index=\"{1}\" class=\"{2}\">{3}</li>',\n        i,\n        $.trim([\n          i === _this.state.currValue  ? 'selected' : '',\n          i === _this.items.length - 1 ? 'last'     : '',\n          elm.disabled                 ? 'disabled' : ''\n        ].join(' ')),\n        $.isFunction(itemBuilder) ? itemBuilder(elm, elm.element, i) : _this.utils.format(itemBuilder, elm)\n      );\n    },\n\n    /** Bind events on the elements */\n    bindEvents: function() {\n      var _this = this;\n\n      _this.elements.wrapper\n        .add(_this.$element)\n        .add(_this.elements.outerWrapper)\n        .add(_this.elements.input)\n        .off(bindSufix);\n\n      _this.elements.outerWrapper.on('mouseenter' + bindSufix + ' mouseleave' + bindSufix, function(e) {\n        $(this).toggleClass(_this.classes.hover, e.type === 'mouseenter');\n\n        // Delay close effect when openOnHover is true\n        if ( _this.options.openOnHover ) {\n          clearTimeout(_this.closeTimer);\n\n          if ( e.type === 'mouseleave' ) {\n            _this.closeTimer = setTimeout($.proxy(_this.close, _this), _this.options.hoverIntentTimeout);\n          } else {\n            _this.open();\n          }\n        }\n      });\n\n      // Toggle open/close\n      _this.elements.wrapper.on('click' + bindSufix, function(e) {\n        _this.state.opened ? _this.close() : _this.open(e);\n      });\n\n      _this.elements.input\n        .prop({ tabindex: _this.originalTabindex, disabled: false })\n        .on('keydown' + bindSufix, $.proxy(_this.handleKeys, _this))\n        .on('focusin' + bindSufix, function(e) {\n          _this.elements.outerWrapper.addClass(_this.classes.focus);\n\n          // Prevent the flicker when focusing out and back again in the browser window\n          _this.elements.input.one('blur', function() {\n            _this.elements.input.blur();\n          });\n\n          if ( _this.options.openOnFocus && !_this.state.opened ) {\n            _this.open(e);\n          }\n        })\n        .on('focusout' + bindSufix, function() {\n          _this.elements.outerWrapper.removeClass(_this.classes.focus);\n        })\n        .on('input propertychange', function() {\n          var val = _this.elements.input.val();\n\n          // Clear search\n          clearTimeout(_this.resetStr);\n          _this.resetStr = setTimeout(function() {\n            _this.elements.input.val('');\n          }, _this.options.keySearchTimeout);\n\n          if ( val.length ) {\n            // Search in select options\n            $.each(_this.items, function(i, elm) {\n              if ( RegExp('^' + _this.utils.escapeRegExp(val), 'i').test(elm.slug) && !elm.disabled ) {\n                _this.select(i);\n                return false;\n              }\n            });\n          }\n        });\n\n      _this.$li.on({\n        // Prevent <input> blur on Chrome\n        mousedown: function(e) {\n          e.preventDefault();\n          e.stopPropagation();\n        },\n        click: function() {\n          // The second parameter is to close the box after click\n          _this.select($(this).data('index'), true);\n\n          // Chrome doesn't close options box if select is wrapped with a label\n          // We need to 'return false' to avoid that\n          return false;\n        }\n      });\n    },\n\n    /**\n     * Behavior when keyboard keys is pressed\n     *\n     * @param {object} e - Event object\n     */\n    handleKeys: function(e) {\n      var _this = this;\n      var key = e.keyCode || e.which;\n      var keys = _this.options.keys;\n\n      var isPrev = $.inArray(key, keys.previous) > -1;\n      var isNext = $.inArray(key, keys.next) > -1;\n      var isSelect = $.inArray(key, keys.select) > -1;\n      var isOpen = $.inArray(key, keys.open) > -1;\n      var idx = _this.state.selectedIdx;\n      var isFirstOrLastItem = (isPrev && idx === 0) || (isNext && (idx + 1) === _this.items.length);\n      var goToItem = 0;\n\n      // Enter / Space\n      if ( key === 13 || key === 32 ) {\n        e.preventDefault();\n      }\n\n      // If it's a directional key\n      if ( isPrev || isNext ) {\n        if ( !_this.options.allowWrap && isFirstOrLastItem ) {\n          return;\n        }\n\n        if ( isPrev ) {\n          goToItem = _this.utils.previousEnabledItem(_this.items, idx);\n        }\n\n        if ( isNext ) {\n          goToItem = _this.utils.nextEnabledItem(_this.items, idx);\n        }\n\n        _this.select(goToItem);\n      }\n\n      // Tab / Enter / ESC\n      if ( isSelect && _this.state.opened ) {\n        _this.select(idx, true);\n        return;\n      }\n\n      // Space / Enter / Left / Up / Right / Down\n      if ( isOpen && !_this.state.opened ) {\n        _this.open();\n      }\n    },\n\n    /** Update the items object */\n    refresh: function() {\n      var _this = this;\n\n      _this.populate();\n      _this.activate();\n      _this.utils.triggerCallback('Refresh', _this);\n    },\n\n    /** Set options box width/height */\n    setOptionsDimensions: function() {\n      var _this = this;\n\n      // Calculate options box height\n      // Set a temporary class on the hidden parent of the element\n      var hiddenChildren = _this.elements.items.closest(':visible').children(':hidden').addClass(_this.classes.tempshow);\n      var maxHeight = _this.options.maxHeight;\n      var itemsWidth = _this.elements.items.outerWidth();\n      var wrapperWidth = _this.elements.wrapper.outerWidth() - (itemsWidth - _this.elements.items.width());\n\n      // Set the dimensions, minimum is wrapper width, expand for long items if option is true\n      if ( !_this.options.expandToItemText || wrapperWidth > itemsWidth ) {\n        _this.finalWidth = wrapperWidth;\n      } else {\n        // Make sure the scrollbar width is included\n        _this.elements.items.css('overflow', 'scroll');\n\n        // Set a really long width for _this.elements.outerWrapper\n        _this.elements.outerWrapper.width(9e4);\n        _this.finalWidth = _this.elements.items.width();\n        // Set scroll bar to auto\n        _this.elements.items.css('overflow', '');\n        _this.elements.outerWrapper.width('');\n      }\n\n      _this.elements.items.width(_this.finalWidth).height() > maxHeight && _this.elements.items.height(maxHeight);\n\n      // Remove the temporary class\n      hiddenChildren.removeClass(_this.classes.tempshow);\n    },\n\n    /** Detect if the options box is inside the window */\n    isInViewport: function() {\n      var _this = this;\n      var scrollTop = $win.scrollTop();\n      var winHeight = $win.height();\n      var uiPosX = _this.elements.outerWrapper.offset().top;\n      var uiHeight = _this.elements.outerWrapper.outerHeight();\n\n      var fitsDown = (uiPosX + uiHeight + _this.itemsHeight) <= (scrollTop + winHeight);\n      var fitsAbove = (uiPosX - _this.itemsHeight) > scrollTop;\n\n      // If it does not fit below, only render it\n      // above it fit's there.\n      // It's acceptable that the user needs to\n      // scroll the viewport to see the cut off UI\n      var renderAbove = !fitsDown && fitsAbove;\n\n      _this.elements.outerWrapper.toggleClass(_this.classes.above, renderAbove);\n    },\n\n    /**\n     * Detect if currently selected option is visible and scroll the options box to show it\n     *\n     * @param {number} index - Index of the selected items\n     */\n    detectItemVisibility: function(index) {\n      var _this = this;\n      var liHeight = _this.$li.eq(index).outerHeight();\n      var liTop = _this.$li[index].offsetTop;\n      var itemsScrollTop = _this.elements.itemsScroll.scrollTop();\n      var scrollT = liTop + liHeight * 2;\n\n      _this.elements.itemsScroll.scrollTop(\n        scrollT > itemsScrollTop + _this.itemsHeight ? scrollT - _this.itemsHeight :\n          liTop - liHeight < itemsScrollTop ? liTop - liHeight :\n            itemsScrollTop\n      );\n    },\n\n    /**\n     * Open the select options box\n     *\n     * @param {event} e - Event\n     */\n    open: function(e) {\n      var _this = this;\n\n      _this.utils.triggerCallback('BeforeOpen', _this);\n\n      if ( e ) {\n        e.preventDefault();\n        e.stopPropagation();\n      }\n\n      if ( _this.state.enabled ) {\n        _this.setOptionsDimensions();\n\n        // Find any other opened instances of select and close it\n        $('.' + _this.classes.hideselect, '.' + _this.classes.open).children()[pluginName]('close');\n\n        _this.state.opened = true;\n        _this.itemsHeight = _this.elements.items.outerHeight();\n        _this.itemsInnerHeight = _this.elements.items.height();\n\n        // Toggle options box visibility\n        _this.elements.outerWrapper.addClass(_this.classes.open);\n\n        // Give dummy input focus\n        _this.elements.input.val('');\n        if ( e && e.type !== 'focusin' ) {\n          _this.elements.input.focus();\n        }\n\n        $doc\n          .on('click' + bindSufix, $.proxy(_this.close, _this))\n          .on('scroll' + bindSufix, $.proxy(_this.isInViewport, _this));\n        _this.isInViewport();\n\n        // Prevent window scroll when using mouse wheel inside items box\n        if ( _this.options.preventWindowScroll ) {\n          /* istanbul ignore next */\n          $doc.on('mousewheel' + bindSufix + ' DOMMouseScroll' + bindSufix, '.' + _this.classes.scroll, function(e) {\n            var orgEvent = e.originalEvent;\n            var scrollTop = $(this).scrollTop();\n            var deltaY = 0;\n\n            if ( 'detail'      in orgEvent ) { deltaY = orgEvent.detail * -1; }\n            if ( 'wheelDelta'  in orgEvent ) { deltaY = orgEvent.wheelDelta;  }\n            if ( 'wheelDeltaY' in orgEvent ) { deltaY = orgEvent.wheelDeltaY; }\n            if ( 'deltaY'      in orgEvent ) { deltaY = orgEvent.deltaY * -1; }\n\n            if ( scrollTop === (this.scrollHeight - _this.itemsInnerHeight) && deltaY < 0 || scrollTop === 0 && deltaY > 0 ) {\n              e.preventDefault();\n            }\n          });\n        }\n\n        _this.detectItemVisibility(_this.state.selectedIdx);\n\n        _this.utils.triggerCallback('Open', _this);\n      }\n    },\n\n    /** Close the select options box */\n    close: function() {\n      var _this = this;\n\n      _this.utils.triggerCallback('BeforeClose', _this);\n\n      _this.change();\n\n      // Remove custom events on document\n      $doc.off(bindSufix);\n\n      // Remove visible class to hide options box\n      _this.elements.outerWrapper.removeClass(_this.classes.open);\n\n      _this.state.opened = false;\n\n      _this.utils.triggerCallback('Close', _this);\n    },\n\n    /** Select current option and change the label */\n    change: function() {\n      var _this = this;\n\n      _this.utils.triggerCallback('BeforeChange', _this);\n\n      if ( _this.state.currValue !== _this.state.selectedIdx ) {\n        // Apply changed value to original select\n        _this.$element\n          .prop('selectedIndex', _this.state.currValue = _this.state.selectedIdx)\n          .data('value', _this.lookupItems[_this.state.selectedIdx].text);\n\n        // Change label text\n        _this.setLabel();\n      }\n\n      _this.utils.triggerCallback('Change', _this);\n    },\n\n    /**\n     * Select option\n     *\n     * @param {number}  index - Index of the option that will be selected\n     * @param {boolean} close - Close the options box after selecting\n     */\n    select: function(index, close) {\n      var _this = this;\n\n      // Parameter index is required\n      if ( index === undefined ) {\n        return;\n      }\n\n      // If element is disabled, can't select it\n      if ( !_this.lookupItems[index].disabled ) {\n        _this.$li.filter('[data-index]')\n          .removeClass('selected')\n          .eq(_this.state.selectedIdx = index)\n          .addClass('selected');\n\n        _this.detectItemVisibility(index);\n\n        // If 'close' is false (default), the options box won't close after\n        // each selected item, this is necessary for keyboard navigation\n        if ( close ) {\n          _this.close();\n        }\n      }\n    },\n\n    /**\n     * Unbind and remove\n     *\n     * @param {boolean} preserveData - Check if the data on the element should be removed too\n     */\n    destroy: function(preserveData) {\n      var _this = this;\n\n      if ( _this.state && _this.state.enabled ) {\n        _this.elements.items.add(_this.elements.wrapper).add(_this.elements.input).remove();\n\n        if ( !preserveData ) {\n          _this.$element.removeData(pluginName).removeData('value');\n        }\n\n        _this.$element.prop('tabindex', _this.originalTabindex).off(bindSufix).off(_this.eventTriggers).unwrap().unwrap();\n\n        _this.state.enabled = false;\n      }\n    }\n  };\n\n  // A really lightweight plugin wrapper around the constructor,\n  // preventing against multiple instantiations\n  $.fn[pluginName] = function(args) {\n    return this.each(function() {\n      var data = $.data(this, pluginName);\n\n      if ( data && !data.disableOnMobile ) {\n        (typeof args === 'string' && data[args]) ? data[args]() : data.init(args);\n      } else {\n        $.data(this, pluginName, new Selectric(this, args));\n      }\n    });\n  };\n\n  /**\n   * Hooks for the callbacks\n   *\n   * @type {object}\n   */\n  $.fn[pluginName].hooks = {\n    /**\n     * @param {string} callbackName - The callback name.\n     * @param {string}     hookName - The name of the hook to be attached.\n     * @param {function}         fn - Callback function.\n     */\n    add: function(callbackName, hookName, fn) {\n      if ( !this[callbackName] ) {\n        this[callbackName] = {};\n      }\n\n      this[callbackName][hookName] = fn;\n    },\n\n    /**\n     * @param {string} callbackName - The callback name.\n     * @param {string}     hookName - The name of the hook that will be removed.\n     */\n    remove: function(callbackName, hookName) {\n      delete this[callbackName][hookName];\n    }\n  };\n\n  /**\n   * Default plugin options\n   *\n   * @type {object}\n   */\n  $.fn[pluginName].defaults = {\n    onChange             : function(elm) { $(elm).change(); },\n    maxHeight            : 300,\n    keySearchTimeout     : 500,\n    arrowButtonMarkup    : '<b class=\"button\">&#x25be;</b>',\n    disableOnMobile      : true,\n    openOnFocus          : true,\n    openOnHover          : false,\n    hoverIntentTimeout   : 500,\n    expandToItemText     : false,\n    responsive           : false,\n    preventWindowScroll  : true,\n    inheritOriginalWidth : false,\n    allowWrap            : true,\n    optionsItemBuilder   : '{text}', // function(itemData, element, index)\n    labelBuilder         : '{text}', // function(currItem)\n    keys                 : {\n      previous : [37, 38],                 // Left / Up\n      next     : [39, 40],                 // Right / Down\n      select   : [9, 13, 27],              // Tab / Enter / Escape\n      open     : [13, 32, 37, 38, 39, 40], // Enter / Space / Left / Up / Right / Down\n      close    : [9, 27]                   // Tab / Escape\n    },\n    customClass          : {\n      prefix: pluginName,\n      camelCase: false\n    }\n  };\n}));\n\n//# sourceURL=webpack:///../node_modules/jquery-selectric/src/jquery.selectric.js?");

/***/ }),

/***/ "../node_modules/jquery-selectric/src/selectric.scss":
/*!***********************************************************!*\
  !*** ../node_modules/jquery-selectric/src/selectric.scss ***!
  \***********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("\nvar content = __webpack_require__(/*! !../../css-loader!../../sass-loader/lib/loader.js!./selectric.scss */ \"../node_modules/css-loader/index.js!../node_modules/sass-loader/lib/loader.js!../node_modules/jquery-selectric/src/selectric.scss\");\n\nif(typeof content === 'string') content = [[module.i, content, '']];\n\nvar transform;\nvar insertInto;\n\n\n\nvar options = {\"hmr\":true}\n\noptions.transform = transform\noptions.insertInto = undefined;\n\nvar update = __webpack_require__(/*! ../../style-loader/lib/addStyles.js */ \"../node_modules/style-loader/lib/addStyles.js\")(content, options);\n\nif(content.locals) module.exports = content.locals;\n\nif(false) {}\n\n//# sourceURL=webpack:///../node_modules/jquery-selectric/src/selectric.scss?");

/***/ })

}]);